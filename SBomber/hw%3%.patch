diff --git a/SBomber/CMakeLists.txt b/SBomber/CMakeLists.txt
index 1ba5441..5958fa1 100644
--- a/SBomber/CMakeLists.txt
+++ b/SBomber/CMakeLists.txt
@@ -12,17 +12,23 @@ set(HEADER)
 
 list(APPEND HEADER
         include/BombDecorator.h
-        include/BombIterator.h)
+        include/BombIterator.h
+        include/IIterator.h
+        include/EvenBombIterator.h
+        include/OddBombIterator.h
+        include/AdapterTank.h)
 
 list(APPEND SOURCE
         src/BombDecorator.cpp
-        src/BombIterator.cpp)
+        src/BombIterator.cpp
+        src/EvenBombIterator.cpp
+        src/OddBombIterator.cpp
+        src/AdapterTank.cpp)
 
+file(GLOB SOURCES "src/*.cpp")
 
 include_directories(include)
 
-file(GLOB SOURCES "src/*.cpp")
-
 set(all_code_files
         ${HEADER}
         ${SOURCE})
diff --git a/SBomber/include/BombIterator.h b/SBomber/include/BombIterator.h
index e821692..c219dd7 100644
--- a/SBomber/include/BombIterator.h
+++ b/SBomber/include/BombIterator.h
@@ -1,10 +1,24 @@
 #ifndef SBOMBER_BOMBITERATOR_H
 #define SBOMBER_BOMBITERATOR_H
 
+#include <vector>
 
-class BombIterator {
+#include "Bomb.h"
+#include "IIterator.h"
 
+class BombIterator {
+public:
+    explicit BombIterator(std::vector<Bomb*>  vecBombs);
+    void begin();
+    Bomb* Next();
+    Bomb* CurrentObj();
+    [[nodiscard]]bool isDone() const;
+private:
+    std::vector<Bomb*> mVecBombs;
+    size_t mCurIndex;
+    Bomb* mPtr;
 };
 
 
+
 #endif //SBOMBER_BOMBITERATOR_H
diff --git a/SBomber/include/EvenBombIterator.h b/SBomber/include/EvenBombIterator.h
index d796ba5..b59d70b 100644
--- a/SBomber/include/EvenBombIterator.h
+++ b/SBomber/include/EvenBombIterator.h
@@ -1,13 +1,23 @@
-//
-// Created by maxim on 06.01.2022.
-//
-
 #ifndef SBOMBER_EVENBOMBITERATOR_H
 #define SBOMBER_EVENBOMBITERATOR_H
 
+#include "SBomber.h"
+#include "IIterator.h"
+
+class EvenBombIterator : public IIterator {
+private:
 
-class EvenBombIterator {
+public:
+    explicit EvenBombIterator(std::vector<DynamicObject*>  refArr);
+    void First() override;
+    Bomb* Next() override;
+    [[nodiscard]] bool isDone() const override;
+    [[nodiscard]] Bomb* CurrentObj() override;
 
+private:
+    std::vector<DynamicObject*> mRefArr;
+    size_t mCurIndex;
+    Bomb* mPtr;
 };
 
 
diff --git a/SBomber/include/FileLoggerSingleton.h b/SBomber/include/FileLoggerSingleton.h
index a71a804..6ae1960 100644
--- a/SBomber/include/FileLoggerSingleton.h
+++ b/SBomber/include/FileLoggerSingleton.h
@@ -5,6 +5,7 @@
 #include <fstream>
 
 #include "GetCurDateTimeSingleton.h"
+#include "Bomb.h"
 
 class FileLoggerSingleton {
 public:
diff --git a/SBomber/include/GameObject.h b/SBomber/include/GameObject.h
index 1d56d2e..020aa07 100644
--- a/SBomber/include/GameObject.h
+++ b/SBomber/include/GameObject.h
@@ -9,7 +9,7 @@ public:
 
   virtual void Draw() const = 0;
 
-  inline void SetPos(double nx, double ny) {
+  virtual inline void SetPos(double nx, double ny) {
     x = nx;
     y = ny;
   }
@@ -17,7 +17,7 @@ public:
   inline double GetY() const { return y; }
   inline double GetX() const { return x; }
 
-  inline void SetWidth(uint16_t widthN) { width = widthN; }
+  virtual inline void SetWidth(uint16_t widthN) { width = widthN; }
   inline uint16_t GetWidth() const { return width; }
 
 protected:
diff --git a/SBomber/include/IIterator.h b/SBomber/include/IIterator.h
index 6e7dfee..7ce0702 100644
--- a/SBomber/include/IIterator.h
+++ b/SBomber/include/IIterator.h
@@ -1,8 +1,16 @@
-//
-// Created by maxim on 04.01.2022.
-//
-
 #ifndef SBOMBER_IITERATOR_H
 #define SBOMBER_IITERATOR_H
 
+#include "DynamicObject.h"
+
+class IIterator {
+public:
+    virtual void First() = 0;
+    virtual Bomb* Next() = 0;
+    [[nodiscard]] virtual bool isDone() const = 0;
+    [[nodiscard]] virtual Bomb* CurrentObj() = 0;
+    virtual ~IIterator() = default;
+};
+
+
 #endif //SBOMBER_IITERATOR_H
diff --git a/SBomber/include/OddBombIterator.h b/SBomber/include/OddBombIterator.h
index 9774e4e..e71947a 100644
--- a/SBomber/include/OddBombIterator.h
+++ b/SBomber/include/OddBombIterator.h
@@ -1,13 +1,20 @@
-//
-// Created by maxim on 06.01.2022.
-//
-
 #ifndef SBOMBER_ODDBOMBITERATOR_H
 #define SBOMBER_ODDBOMBITERATOR_H
 
+#include "SBomber.h"
+#include "EvenBombIterator.h"
 
-class OddBombIterator {
-
+class OddBombIterator : public IIterator {
+public:
+    explicit OddBombIterator(std::vector<DynamicObject*>  refArr);
+    void First() override;
+    [[nodiscard]] bool isDone() const override;
+    Bomb* Next() override;
+    Bomb* CurrentObj() override;
+private:
+    std::vector<DynamicObject*> mRefArr;
+    size_t mCurIndex;
+    Bomb *mPtr;
 };
 
 
diff --git a/SBomber/include/SBomber.h b/SBomber/include/SBomber.h
index b8b7fd8..a5d50a2 100644
--- a/SBomber/include/SBomber.h
+++ b/SBomber/include/SBomber.h
@@ -22,7 +22,7 @@ class SBomber
 {
 public:
 
-    SBomber();
+    explicit SBomber(bool _oddIteration);
     ~SBomber();
     
     inline bool GetExitFlag() const { return exitFlag; }
@@ -48,7 +48,6 @@ public:
     static House* createHouse(const double pos, const uint16_t width);
 
     static void CommandExecute(Command* command);
-
 private:
 
     void CheckPlaneAndLevelGUI();
@@ -68,6 +67,7 @@ private:
     std::vector<GameObject*> vecStaticObj;
     
     bool exitFlag;
+    bool oddIteration;
 
     uint64_t startTime, finishTime, passedTime;
     uint16_t bombsNumber, deltaTime, fps;
diff --git a/SBomber/src/BombIterator.cpp b/SBomber/src/BombIterator.cpp
index 4329339..1ff5241 100644
--- a/SBomber/src/BombIterator.cpp
+++ b/SBomber/src/BombIterator.cpp
@@ -1 +1,41 @@
 #include "BombIterator.h"
+
+#include <iostream>
+#include <utility>
+
+BombIterator::BombIterator(std::vector<Bomb*>  vecBombs) :
+                 mVecBombs(std::move(vecBombs)), mCurIndex(0),
+                 mPtr(nullptr) {
+}
+
+void BombIterator::begin() {
+    mCurIndex = 0;
+}
+
+Bomb *BombIterator::CurrentObj() {
+    return mVecBombs[mCurIndex];
+}
+
+bool BombIterator::isDone() const {
+    return mCurIndex == mVecBombs.size();
+}
+
+Bomb* BombIterator::Next() {
+    if (isDone()) {
+        mCurIndex = 0;
+        mPtr = nullptr;
+    }
+    ++mCurIndex;
+
+    if (mCurIndex > mVecBombs.size()) {
+        mCurIndex = mVecBombs.size();
+    }
+    if (!isDone()) {
+        mPtr = mVecBombs[mCurIndex];
+    }
+    return mPtr;
+}
+
+
+
+
diff --git a/SBomber/src/Command.cpp b/SBomber/src/Command.cpp
index 48e97af..38503d0 100644
--- a/SBomber/src/Command.cpp
+++ b/SBomber/src/Command.cpp
@@ -5,8 +5,8 @@ IContext::IContext() : mPlane(nullptr),
                         mSpeed(0),
                         mWidthCrater(0),
                         mScore(0) {
-TestFileLogger::getInstance().WriteToLog(std::string(
-        __func__) + " IContext() was invoked");
+/*TestFileLogger::getInstance().WriteToLog(std::string(
+        __func__) + " IContext() was invoked");*/
 }
 
 IContext::~IContext() {
@@ -14,8 +14,8 @@ IContext::~IContext() {
 }
 
 Context::~Context() {
-    TestFileLogger::getInstance().WriteToLog(std::string(__func__) +
-                                  "Destructor was invoked");
+    /*TestFileLogger::getInstance().WriteToLog(std::string(__func__) +
+                                  "Destructor was invoked");*/
 }
 
 void Context::setParam(const Plane *plane, std::vector<DynamicObject *> &vecDynamicObject, const uint16_t &bomber,
@@ -27,41 +27,41 @@ void Context::setParam(const Plane *plane, std::vector<DynamicObject *> &vecDyna
     mSpeed = speed;
     mWidthCrater = widthCrater;
     mScore = score;
-    TestFileLogger::getInstance().WriteToLog(std::string(
-            __func__) + " Context::setParam() was invoked");
+    /*TestFileLogger::getInstance().WriteToLog(std::string(
+            __func__) + " Context::setParam() was invoked");*/
 }
 
 void CommandDropBomb::setParam(IContext *context) {
     this->mContext = context;
-    TestFileLogger::getInstance().WriteToLog(std::string(
-            __func__) + " CommandDropBomb::setParam() was invoked");
+    /*TestFileLogger::getInstance().WriteToLog(std::string(
+            __func__) + " CommandDropBomb::setParam() was invoked");*/
 }
 
 void CommandDropBomb::execute() {
     if (mContext->mBombCount > 0) {
         FileLoggerProxy::getInstance().WriteToLog(std::string(__func__)
                                                   + " was invoked");
-        TestFileLogger::getInstance().WriteToLog(std::string(
-                __func__) + " CommandDropBomb::execute() was invoked");
+        /*TestFileLogger::getInstance().WriteToLog(std::string(
+                __func__) + " CommandDropBomb::execute() was invoked");*/
         double x = mContext->mPlane->GetX() + 4;
         double y = mContext->mPlane->GetY() + 2;
-        TestFileLogger::getInstance().WriteToLog(std::string(
+        /*TestFileLogger::getInstance().WriteToLog(std::string(
                 __func__) +
                                                  " Score = " + std::to_string(mContext->mScore) +
-                                                 " Bombs number = " + std::to_string(mContext->mBombCount));
+                                                 " Bombs number = " + std::to_string(mContext->mBombCount));*/
 
         auto* pBomb = new Bomb;
         pBomb->SetDirection(0.3, 1);
         pBomb->SetSpeed(mContext->mSpeed);
         pBomb->SetPos(x, y); pBomb->SetWidth(mContext->mWidthCrater);
-        auto decorator = new BombDecorator(pBomb);
+//        auto decorator = new BombDecorator(pBomb);
 
-        mContext->mVecDynamicObject.push_back(decorator);
+        mContext->mVecDynamicObject.push_back(pBomb);
         mContext->mBombCount--;
         mContext->mScore -= Bomb::BombCost;
-        TestFileLogger::getInstance().WriteToLog(std::string(__func__)
+        /*TestFileLogger::getInstance().WriteToLog(std::string(__func__)
                                                  + " Score = " + std::to_string(mContext->mScore) +
-                                                 " Bombs number = " + std::to_string(mContext->mBombCount));
+                                                 " Bombs number = " + std::to_string(mContext->mBombCount));*/
     }
 }
 
@@ -82,11 +82,6 @@ void DeleteStaticObj::execute() {
     }
 }
 
-const std::vector<GameObject *> &DeleteStaticObj::getStaticVectorObject() const {
-    return mStaticVector;
-}
-
-
 DeleteDynamicObj::DeleteDynamicObj() : mDynamicObj(nullptr) {}
 
 void DeleteDynamicObj::setParam(DynamicObject *obj, const std::vector<DynamicObject *> &vec) {
@@ -108,7 +103,9 @@ const std::vector<DynamicObject *> &DeleteDynamicObj::getDynamicVectorObject() c
     return mDynamicVector;
 }
 
-
+const std::vector<GameObject *> &DeleteStaticObj::getStaticVectorObject() const {
+    return mStaticVector;
+}
 
 
 
diff --git a/SBomber/src/EvenBombIterator.cpp b/SBomber/src/EvenBombIterator.cpp
index db3bd9f..9cc27a8 100644
--- a/SBomber/src/EvenBombIterator.cpp
+++ b/SBomber/src/EvenBombIterator.cpp
@@ -1,5 +1,39 @@
-//
-// Created by maxim on 06.01.2022.
-//
-
 #include "EvenBombIterator.h"
+
+#include <utility>
+
+EvenBombIterator::EvenBombIterator(std::vector<DynamicObject *> refArr) :
+                               mRefArr(std::move(refArr)), mCurIndex(0), mPtr(nullptr){
+
+}
+
+void EvenBombIterator::First() {
+    mCurIndex = 1;
+    mPtr = dynamic_cast<Bomb*>(mRefArr[mCurIndex]);
+}
+
+Bomb *EvenBombIterator::Next() {
+    if (isDone()) {
+        mPtr = nullptr;
+        mCurIndex = 0;
+    }
+
+
+    mCurIndex += 2;
+    if (mCurIndex > mRefArr.size()) {
+        mCurIndex = mRefArr.size();
+    }
+    if (!isDone()) {
+        mPtr = dynamic_cast<Bomb*>(mRefArr[mCurIndex]);
+    }
+
+    return mPtr;
+}
+
+bool EvenBombIterator::isDone() const {
+    return mCurIndex == mRefArr.size();
+}
+
+Bomb *EvenBombIterator::CurrentObj() {
+    return mPtr;
+}
diff --git a/SBomber/src/FileLoggerSingleton.cpp b/SBomber/src/FileLoggerSingleton.cpp
index dc8156c..3649ab6 100644
--- a/SBomber/src/FileLoggerSingleton.cpp
+++ b/SBomber/src/FileLoggerSingleton.cpp
@@ -36,4 +36,4 @@ void FileLoggerSingleton::WriteToLog(const std::string& str, double d)
         logOut << GetCurDateTimeSingleton::getInstance().GetCurDateTime() <<
                " - " << str << d << " Singleton" << std::endl;
     }
-}
\ No newline at end of file
+}
diff --git a/SBomber/src/OddBombIterator.cpp b/SBomber/src/OddBombIterator.cpp
index 728a430..348b3db 100644
--- a/SBomber/src/OddBombIterator.cpp
+++ b/SBomber/src/OddBombIterator.cpp
@@ -1,5 +1,39 @@
-//
-// Created by maxim on 06.01.2022.
-//
-
 #include "OddBombIterator.h"
+
+#include <utility>
+
+OddBombIterator::OddBombIterator(std::vector<DynamicObject *> refArr) :
+                                 mRefArr(std::move(refArr)), mCurIndex(0),
+                                 mPtr(nullptr){
+}
+
+void OddBombIterator::First() {
+    mCurIndex = 1;
+    mPtr = dynamic_cast<Bomb*>(mRefArr[mCurIndex]);
+}
+
+bool OddBombIterator::isDone() const {
+    return mCurIndex == mRefArr.size();
+}
+
+Bomb* OddBombIterator::Next() {
+    if (isDone()) {
+        mPtr = nullptr;
+        mCurIndex = 0;
+    }
+
+
+    mCurIndex += 2;
+    if (mCurIndex > mRefArr.size()) {
+        mCurIndex = mRefArr.size();
+    }
+    if (!isDone()) {
+        mPtr = dynamic_cast<Bomb*>(mRefArr[mCurIndex]);
+    }
+
+    return mPtr;
+}
+
+Bomb* OddBombIterator::CurrentObj() {
+    return mPtr;
+}
diff --git a/SBomber/src/SBomber.cpp b/SBomber/src/SBomber.cpp
index cbb793e..416aba4 100644
--- a/SBomber/src/SBomber.cpp
+++ b/SBomber/src/SBomber.cpp
@@ -1,5 +1,9 @@
 #include "SBomber.h"
 #include "Command.h"
+#include "BombIterator.h"
+#include "EvenBombIterator.h"
+#include "OddBombIterator.h"
+#include "AdapterTank.h"
 
 
 #if defined(_WIN32) || defined(WIN32)
@@ -74,10 +78,14 @@ Ground *SBomber::createGround() {
 Tank *SBomber::createTank(const double pos, const uint16_t width) {
     const uint16_t maxY = ScreenSingleton::getInstance().GetMaxY();
     const uint16_t groundY = maxY - 5;
-    auto* pTank = new Tank;
+    //Adapter for Tank
+    std::string options {"1;20;15"};
+    AdapterTank tank(options);
+
+    /*auto* pTank = new Tank;
     pTank->SetWidth(width);
     pTank->SetPos(pos, groundY - 1);
-    return pTank;
+    return pTank;*/
 }
 
 House *SBomber::createHouse(const double pos, const uint16_t width) {
@@ -89,9 +97,9 @@ House *SBomber::createHouse(const double pos, const uint16_t width) {
     return pHouse;
 }
 
-SBomber::SBomber()
+SBomber::SBomber(const bool _oddIteration)
   : exitFlag(false), startTime(0), finishTime(0), deltaTime(0), passedTime(0),
-    fps(0), bombsNumber(10), score(0) {
+    fps(0), bombsNumber(10), score(0), oddIteration(_oddIteration) {
   FileLoggerProxy::getInstance().WriteToLog(std::string(__func__ )
   + " was invoked");
 
@@ -153,20 +161,24 @@ void SBomber::CheckPlaneAndLevelGUI() {
 }
 
 void SBomber::CheckBombsAndGround() {
-  std::vector<Bomb*> vecBombs = FindAllBombs();
-  Ground* pGround = FindGround();
-  const double y = pGround->GetY();
-  for (size_t i = 0; i < vecBombs.size(); i++) {
-    if (vecBombs[i]->GetY() >= y) {
-      pGround->AddCrater(vecBombs[i]->GetX());
-        CheckDestroyableObjects(vecBombs[i]);
-        auto command = std::make_unique<DeleteDynamicObj>();
-        //Using Command pattern
-        command->setParam(vecBombs[i], vecDynamicObj);
-        CommandExecute(command.get());
-        vecDynamicObj = command->getDynamicVectorObject();
+    Ground *pGround = FindGround();
+    const double y = pGround->GetY();
+  //Using Iterator pattern
+    std::vector<Bomb*> vecBombs = FindAllBombs();
+    auto *pItr = new BombIterator(vecBombs);
+
+    for (pItr->begin(); !pItr->isDone(); pItr->Next()) {
+        if (pItr->CurrentObj()->GetY() >= y) {
+            pGround->AddCrater(pItr->CurrentObj()->GetX());
+            CheckDestroyableObjects(pItr->CurrentObj());
+            auto command = std::make_unique<DeleteDynamicObj>();
+            //Using Command pattern
+            command->setParam(pItr->CurrentObj(), vecDynamicObj);
+            CommandExecute(command.get());
+            vecDynamicObj = command->getDynamicVectorObject();
+        }
     }
-  }
+    delete pItr;
 }
 
 void SBomber::CheckDestroyableObjects(Bomb* pBomb) {
@@ -223,16 +235,24 @@ Ground* SBomber::FindGround() const {
 }
 
 std::vector<Bomb*> SBomber::FindAllBombs() const {
-  std::vector<Bomb*> vecBombs;
+    std::vector<Bomb *> vecBombs;
+    //Strategy Pattern
+    std::unique_ptr<IIterator> pItr;
+    if (!oddIteration) {
+        pItr = std::make_unique<OddBombIterator>(vecDynamicObj);
+    }
+    else {
+        pItr = std::make_unique<EvenBombIterator>(vecDynamicObj);
+    }
 
-  for (size_t i = 0; i < vecDynamicObj.size(); i++) {
-    Bomb* pBomb = dynamic_cast<Bomb*>(vecDynamicObj[i]);
-    if (pBomb != nullptr) {
-      vecBombs.push_back(pBomb);
+    for (pItr->First(); !pItr->isDone(); pItr->Next()) {
+        Bomb *pBomb = pItr->CurrentObj();
+        if (pBomb != nullptr) {
+            vecBombs.push_back(pBomb);
+        }
     }
-  }
 
-  return vecBombs;
+    return vecBombs;
 }
 
 Plane* SBomber::FindPlane() const {
diff --git a/SBomber/src/TestFileLogger.cpp b/SBomber/src/TestFileLogger.cpp
index ecf01e3..d5d0018 100644
--- a/SBomber/src/TestFileLogger.cpp
+++ b/SBomber/src/TestFileLogger.cpp
@@ -31,3 +31,4 @@ void TestFileLogger::WriteToLog(const std::string &str, double d) {
                " - " << str << d << " TestFileLoggerSingleton" << std::endl;
     }
 }
+
diff --git a/SBomber/src/main.cpp b/SBomber/src/main.cpp
index c056b1e..d91299e 100644
--- a/SBomber/src/main.cpp
+++ b/SBomber/src/main.cpp
@@ -1,16 +1,18 @@
 ﻿#include "SBomber.h"
 #include "TestFileLogger.h"
 
+#include <iterator>
 
 int main(int argc, char** argv) {
   FileLoggerProxy::getInstance().OpenLogFile("log.txt");
   TestFileLogger::getInstance().OpenLogFile("test_log.txt");
 
-  SBomber game;
+  SBomber game(true);
   game.run();
 
   FileLoggerProxy::getInstance().CloseLogFile();
   TestFileLogger::getInstance().CloseLogFile();
 
+
   return 0;
 }
