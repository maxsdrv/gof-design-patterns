diff --git a/SBomber/CMakeLists.txt b/SBomber/CMakeLists.txt
index e49a731..0e11f85 100644
--- a/SBomber/CMakeLists.txt
+++ b/SBomber/CMakeLists.txt
@@ -7,8 +7,21 @@ set(CMAKE_INCLUDE_CURRENT_DIR ON)
 set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
+set(SOURCE)
+set(HEADER)
+
+list(APPEND SOURCE
+        src/BombDecorator.cpp)
+
+list(APPEND HEADER
+        include/BombDecorator.h)
+
 include_directories(include)
 
 file(GLOB SOURCES "src/*.cpp")
 
-add_executable(SBomber ${SOURCES})
\ No newline at end of file
+set(all_code_files
+        ${HEADER}
+        ${SOURCE})
+
+add_executable(${PROJECT_NAME} ${all_code_files} ${SOURCES})
\ No newline at end of file
diff --git a/SBomber/include/Bomb.h b/SBomber/include/Bomb.h
index d122e7a..f773d5c 100644
--- a/SBomber/include/Bomb.h
+++ b/SBomber/include/Bomb.h
@@ -10,6 +10,7 @@ public:
 
 	void Draw() const override;
 
+    ~Bomb() override;
 private:
 
 };
diff --git a/SBomber/include/BombDecorator.h b/SBomber/include/BombDecorator.h
index 92ccc49..fe3476d 100644
--- a/SBomber/include/BombDecorator.h
+++ b/SBomber/include/BombDecorator.h
@@ -1,14 +1,14 @@
-//
-// Created by maxim on 29.12.2021.
-//
-
-#ifndef SBOMBER_BOMBDECORATOR_H
-#define SBOMBER_BOMBDECORATOR_H
-
-
-class BombDecorator {
-
+#pragma once
+
+#include "SBomber.h"
+
+class BombDecorator : public DynamicObject {
+public:
+    explicit BombDecorator(Bomb* pBomb);
+    ~BombDecorator() override;
+    void Move(uint16_t time) override;
+    void Draw() const override;
+private:
+    Bomb* mBomb{};
 };
 
-
-#endif //SBOMBER_BOMBDECORATOR_H
diff --git a/SBomber/include/Command.h b/SBomber/include/Command.h
index 0ff23ec..49134e4 100644
--- a/SBomber/include/Command.h
+++ b/SBomber/include/Command.h
@@ -1,14 +1,87 @@
-//
-// Created by maxim on 23.12.2021.
-//
-
 #ifndef SBOMBER_COMMAND_H
 #define SBOMBER_COMMAND_H
 
+#include "SBomber.h"
+#include "TestFileLogger.h"
+#include "BombDecorator.h"
+
+//Command pattern
+
+class IContext {
+public:
+    IContext();
+    virtual ~IContext();
+    virtual void setParam(const Plane* plane,
+                          std::vector<DynamicObject*>& vecDynamicObject,
+                          const uint16_t& bomber,
+                          const double& speed,
+                          const uint16_t& widthCrater,
+                          const int16_t& score) = 0;
+public:
+    const Plane* mPlane;
+    std::vector<DynamicObject*> mVecDynamicObject;
+    uint16_t mBombCount;
+    double mSpeed;
+    uint16_t mWidthCrater;
+    int16_t mScore;
+};
+
+class Context : public IContext {
+public:
+    ~Context() override;
+
+    void setParam(const Plane *plane,
+                  std::vector<DynamicObject*>& vecDynamicObject,
+                  const uint16_t& bomber,
+                  const double& speed,
+                  const uint16_t& widthCrater,
+                  const int16_t& score) override;
+};
 
 class Command {
+public:
+    virtual ~Command() = default;
+    virtual void execute() = 0;
+};
 
+class CommandDropBomb : public Command {
+public:
+    ~CommandDropBomb() override = default;
+    void setParam(IContext* context);
+
+    void execute() override;
+
+private:
+    IContext* mContext;
+};
+
+class DeleteStaticObj : public Command {
+public:
+     DeleteStaticObj();
+    ~DeleteStaticObj() override = default;
+
+    void setParam(GameObject* pObj, const std::vector<GameObject*>& vecStaticObj);
+    void execute() override;
+    //Getters and Setters
+    [[nodiscard]] const std::vector<GameObject*>& getStaticVectorObject() const;
+private:
+    std::vector<GameObject*> mStaticVector;
+    GameObject* mStaticObject;
 };
 
+class DeleteDynamicObj : public Command {
+public:
+    explicit DeleteDynamicObj();
+    ~DeleteDynamicObj() override = default;
+
+    void setParam(DynamicObject* obj, const std::vector<DynamicObject*>& vec);
+    void execute() override;
+
+    //Getters and Setters
+    [[nodiscard]] const std::vector<DynamicObject*>& getDynamicVectorObject() const;
+private:
+    std::vector<DynamicObject*> mDynamicVector;
+    DynamicObject* mDynamicObj;
+};
 
 #endif //SBOMBER_COMMAND_H
diff --git a/SBomber/include/SBomber.h b/SBomber/include/SBomber.h
index 01906e0..b8b7fd8 100644
--- a/SBomber/include/SBomber.h
+++ b/SBomber/include/SBomber.h
@@ -1,6 +1,8 @@
 #pragma once
 
 #include <vector>
+#include <chrono>
+#include <memory>
 
 #include "LevelGUI.h"
 #include "Plane.h"
@@ -9,6 +11,12 @@
 #include "Tank.h"
 #include "House.h"
 #include "FileLoggerProxy.h"
+#include "ScreenSingleton.h"
+#include "enums/CraterSize.h"
+
+class Command;
+class IContext;
+class Context;
 
 class SBomber
 {
@@ -39,14 +47,15 @@ public:
     static Tank* createTank(const double pos, const uint16_t width);
     static House* createHouse(const double pos, const uint16_t width);
 
+    static void CommandExecute(Command* command);
+
 private:
 
     void CheckPlaneAndLevelGUI();
     void CheckBombsAndGround();
     void  CheckDestroyableObjects(Bomb* pBomb);
 
-    void  DeleteDynamicObj(DynamicObject * pBomb);
-    void  DeleteStaticObj(GameObject* pObj);
+    void updateFromCommand(Context* context);
 
     Ground * FindGround() const;
     Plane * FindPlane() const;
@@ -54,7 +63,6 @@ private:
     std::vector<DestroyableGroundObject*> FindDestroyableGroundObjects() const;
     std::vector<Bomb*> FindAllBombs() const;
 
-    void DropBomb();
 
     std::vector<DynamicObject*> vecDynamicObj;
     std::vector<GameObject*> vecStaticObj;
diff --git a/SBomber/include/TestFileLogger.h b/SBomber/include/TestFileLogger.h
index c9f4c14..8c294ad 100644
--- a/SBomber/include/TestFileLogger.h
+++ b/SBomber/include/TestFileLogger.h
@@ -1,8 +1,27 @@
-//
-// Created by maxim on 29.12.2021.
-//
-
 #ifndef SBOMBER_TESTFILELOGGER_H
 #define SBOMBER_TESTFILELOGGER_H
 
+#include "FileLoggerSingleton.h"
+
+class TestFileLogger : public FileLoggerSingleton {
+public:
+    static TestFileLogger& getInstance() {
+        static TestFileLogger theInstance;
+        return theInstance;
+    }
+    void OpenLogFile(const std::string& FN) override;
+    void CloseLogFile() override;
+    void WriteToLog(const std::string& str) override;
+    void WriteToLog(const std::string& str, int n) override;
+    void WriteToLog(const std::string& str, double d) override;
+private:
+    TestFileLogger() = default;
+    ~TestFileLogger() = default;
+    TestFileLogger(const TestFileLogger& root) = delete;
+    TestFileLogger& operator=(const TestFileLogger&) = delete;
+    TestFileLogger(TestFileLogger&& root) = delete;
+    TestFileLogger& operator=(TestFileLogger&&) = delete;
+};
+
+
 #endif //SBOMBER_TESTFILELOGGER_H
diff --git a/SBomber/include/enums/CraterSize.h b/SBomber/include/enums/CraterSize.h
index cb7d999..c9e0f77 100644
--- a/SBomber/include/enums/CraterSize.h
+++ b/SBomber/include/enums/CraterSize.h
@@ -1,3 +1,5 @@
 #pragma once
 
-enum CraterSize { SMALL_CRATER_SIZE = 9 };
+enum CraterSize { SMALL_CRATER_SIZE  =  9,
+                  MIDDLE_CRATER_SIZE = 12,
+                  BIG_CRATER_SIZE    = 15 };
diff --git a/SBomber/src/Bomb.cpp b/SBomber/src/Bomb.cpp
index 4bc10d4..8ca69f3 100644
--- a/SBomber/src/Bomb.cpp
+++ b/SBomber/src/Bomb.cpp
@@ -1,9 +1,14 @@
 #include "Bomb.h"
 #include <iostream>
 #include "ScreenSingleton.h"
+#include "TestFileLogger.h"
 
 void Bomb::Draw() const {
-  //ScreenSingleton::getInstance().SetColor(CC_LightMagenta);
+//  ScreenSingleton::getInstance().SetColor(CC_LightMagenta);
   ScreenSingleton::getInstance().GotoXY(x, y);
   std::cout << "*";
 }
+
+Bomb::~Bomb() {
+    std::cout << "~Bomb()" << std::endl;
+}
diff --git a/SBomber/src/BombDecorator.cpp b/SBomber/src/BombDecorator.cpp
index a6533c2..65f45e4 100644
--- a/SBomber/src/BombDecorator.cpp
+++ b/SBomber/src/BombDecorator.cpp
@@ -1,4 +1,25 @@
-//
-// Created by maxim on 30.12.2021.
-//
+#include "BombDecorator.h"
+#include "TestFileLogger.h"
 
+BombDecorator::BombDecorator(Bomb* pBomb) : mBomb(pBomb){
+    TestFileLogger::getInstance().WriteToLog(std::string(__func__) +
+                                             " Constructor of Decorator was invoked");
+}
+
+BombDecorator::~BombDecorator() {
+    std::cout << "~BombDecorator()" << std::endl;
+}
+
+void BombDecorator::Move(uint16_t time) {
+    time *= 2;
+    this->mBomb->Move(time);
+    TestFileLogger::getInstance().WriteToLog(std::string(__func__) +
+                                             " Decorator->Move() was invoked");
+}
+
+void BombDecorator::Draw() const {
+    ScreenSingleton::getInstance().SetColor(CC_LightMagenta);
+    this->mBomb->Draw();
+    TestFileLogger::getInstance().WriteToLog(std::string(__func__) +
+                                             " Decorator->Draw() was invoked");
+}
diff --git a/SBomber/src/Command.cpp b/SBomber/src/Command.cpp
index 7facf3e..48e97af 100644
--- a/SBomber/src/Command.cpp
+++ b/SBomber/src/Command.cpp
@@ -1,4 +1,124 @@
-//
-// Created by maxim on 27.12.2021.
-//
+#include "Command.h"
+
+IContext::IContext() : mPlane(nullptr),
+                        mBombCount(0),
+                        mSpeed(0),
+                        mWidthCrater(0),
+                        mScore(0) {
+TestFileLogger::getInstance().WriteToLog(std::string(
+        __func__) + " IContext() was invoked");
+}
+
+IContext::~IContext() {
+    std::cout << "~IContext()" << '\n';
+}
+
+Context::~Context() {
+    TestFileLogger::getInstance().WriteToLog(std::string(__func__) +
+                                  "Destructor was invoked");
+}
+
+void Context::setParam(const Plane *plane, std::vector<DynamicObject *> &vecDynamicObject, const uint16_t &bomber,
+                       const double &speed, const uint16_t &widthCrater, const int16_t &score) {
+
+    this->mPlane = plane;
+    mVecDynamicObject = vecDynamicObject;
+    mBombCount = bomber;
+    mSpeed = speed;
+    mWidthCrater = widthCrater;
+    mScore = score;
+    TestFileLogger::getInstance().WriteToLog(std::string(
+            __func__) + " Context::setParam() was invoked");
+}
+
+void CommandDropBomb::setParam(IContext *context) {
+    this->mContext = context;
+    TestFileLogger::getInstance().WriteToLog(std::string(
+            __func__) + " CommandDropBomb::setParam() was invoked");
+}
+
+void CommandDropBomb::execute() {
+    if (mContext->mBombCount > 0) {
+        FileLoggerProxy::getInstance().WriteToLog(std::string(__func__)
+                                                  + " was invoked");
+        TestFileLogger::getInstance().WriteToLog(std::string(
+                __func__) + " CommandDropBomb::execute() was invoked");
+        double x = mContext->mPlane->GetX() + 4;
+        double y = mContext->mPlane->GetY() + 2;
+        TestFileLogger::getInstance().WriteToLog(std::string(
+                __func__) +
+                                                 " Score = " + std::to_string(mContext->mScore) +
+                                                 " Bombs number = " + std::to_string(mContext->mBombCount));
+
+        auto* pBomb = new Bomb;
+        pBomb->SetDirection(0.3, 1);
+        pBomb->SetSpeed(mContext->mSpeed);
+        pBomb->SetPos(x, y); pBomb->SetWidth(mContext->mWidthCrater);
+        auto decorator = new BombDecorator(pBomb);
+
+        mContext->mVecDynamicObject.push_back(decorator);
+        mContext->mBombCount--;
+        mContext->mScore -= Bomb::BombCost;
+        TestFileLogger::getInstance().WriteToLog(std::string(__func__)
+                                                 + " Score = " + std::to_string(mContext->mScore) +
+                                                 " Bombs number = " + std::to_string(mContext->mBombCount));
+    }
+}
+
+DeleteStaticObj::DeleteStaticObj() : mStaticObject(nullptr) {}
+
+void DeleteStaticObj::setParam(GameObject *pObj, const std::vector<GameObject *> &vecStaticObj) {
+    this->mStaticObject = pObj;
+    this->mStaticVector = vecStaticObj;
+}
+
+void DeleteStaticObj::execute() {
+    auto it = mStaticVector.begin();
+    for (; it != mStaticVector.end(); it++) {
+        if (*it == mStaticObject) {
+            mStaticVector.erase(it);
+            break;
+        }
+    }
+}
+
+const std::vector<GameObject *> &DeleteStaticObj::getStaticVectorObject() const {
+    return mStaticVector;
+}
+
+
+DeleteDynamicObj::DeleteDynamicObj() : mDynamicObj(nullptr) {}
+
+void DeleteDynamicObj::setParam(DynamicObject *obj, const std::vector<DynamicObject *> &vec) {
+    this->mDynamicObj = obj;
+    this->mDynamicVector = vec;
+}
+
+void DeleteDynamicObj::execute() {
+    auto it = mDynamicVector.begin();
+    for (; it != mDynamicVector.end(); it++) {
+        if (*it == mDynamicObj) {
+            mDynamicVector.erase(it);
+            break;
+        }
+    }
+}
+
+const std::vector<DynamicObject *> &DeleteDynamicObj::getDynamicVectorObject() const {
+    return mDynamicVector;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
diff --git a/SBomber/src/FileLoggerSingleton.cpp b/SBomber/src/FileLoggerSingleton.cpp
index a27b571..dc8156c 100644
--- a/SBomber/src/FileLoggerSingleton.cpp
+++ b/SBomber/src/FileLoggerSingleton.cpp
@@ -18,7 +18,7 @@ void FileLoggerSingleton::WriteToLog(const std::string& str)
 {
     if (logOut.is_open()) {
         logOut << GetCurDateTimeSingleton::getInstance().GetCurDateTime() <<
-               " - " << str << " Singletone" << std::endl;
+               " - " << str << " Singleton" << std::endl;
     }
 }
 
@@ -26,7 +26,7 @@ void FileLoggerSingleton::WriteToLog(const std::string& str, int n)
 {
     if (logOut.is_open()) {
         logOut << GetCurDateTimeSingleton::getInstance().GetCurDateTime() <<
-               " - " << str << n << " Singletone" << std::endl;
+               " - " << str << n << " Singleton" << std::endl;
     }
 }
 
@@ -34,6 +34,6 @@ void FileLoggerSingleton::WriteToLog(const std::string& str, double d)
 {
     if (logOut.is_open()) {
         logOut << GetCurDateTimeSingleton::getInstance().GetCurDateTime() <<
-               " - " << str << d << " Singletone" << std::endl;
+               " - " << str << d << " Singleton" << std::endl;
     }
 }
\ No newline at end of file
diff --git a/SBomber/src/SBomber.cpp b/SBomber/src/SBomber.cpp
index 3d3a3b8..cbb793e 100644
--- a/SBomber/src/SBomber.cpp
+++ b/SBomber/src/SBomber.cpp
@@ -1,12 +1,6 @@
-#include "MyTools.h"
 #include "SBomber.h"
-#include "Bomb.h"
-#include "Ground.h"
-#include "Tank.h"
-#include "ScreenSingleton.h"
-#include "enums/CraterSize.h"
-#include <chrono>
-#include <thread>
+#include "Command.h"
+
 
 #if defined(_WIN32) || defined(WIN32)
 
@@ -116,6 +110,7 @@ SBomber::SBomber()
   pBomb->SetSize(SMALL_CRATER_SIZE);
   vecDynamicObj.push_back(pBomb);
   */
+
 }
 
 SBomber::~SBomber() {
@@ -130,6 +125,7 @@ SBomber::~SBomber() {
       delete vecStaticObj[i];
     }
   }
+  std::cout << "~SBomber()" << std::endl;
 }
 
 void SBomber::MoveObjects() {
@@ -164,7 +160,11 @@ void SBomber::CheckBombsAndGround() {
     if (vecBombs[i]->GetY() >= y) {
       pGround->AddCrater(vecBombs[i]->GetX());
         CheckDestroyableObjects(vecBombs[i]);
-      DeleteDynamicObj(vecBombs[i]);
+        auto command = std::make_unique<DeleteDynamicObj>();
+        //Using Command pattern
+        command->setParam(vecBombs[i], vecDynamicObj);
+        CommandExecute(command.get());
+        vecDynamicObj = command->getDynamicVectorObject();
     }
   }
 }
@@ -179,27 +179,11 @@ void SBomber::CheckDestroyableObjects(Bomb* pBomb) {
     const double x2 = x1 + size;
     if (vecDestroyableObjects[i]->isInside(x1, x2)) {
       score += vecDestroyableObjects[i]->GetScore();
-      DeleteStaticObj(vecDestroyableObjects[i]);
-    }
-  }
-}
-
-void SBomber::DeleteDynamicObj(DynamicObject* pObj) {
-  auto it = vecDynamicObj.begin();
-  for (; it != vecDynamicObj.end(); it++) {
-    if (*it == pObj) {
-      vecDynamicObj.erase(it);
-      break;
-    }
-  }
-}
-
-void SBomber::DeleteStaticObj(GameObject* pObj) {
-  auto it = vecStaticObj.begin();
-  for (; it != vecStaticObj.end(); it++) {
-    if (*it == pObj) {
-      vecStaticObj.erase(it);
-      break;
+      //Using Command pattern
+      auto command = std::make_unique<DeleteStaticObj>();
+      command->setParam(vecDestroyableObjects[i], vecStaticObj);
+      CommandExecute(command.get());
+      vecStaticObj = command->getStaticVectorObject();
     }
   }
 }
@@ -282,6 +266,16 @@ void SBomber::ProcessKBHit() {
 
     FileLoggerProxy::getInstance().WriteToLog(std::string(__func__)
                                               + " was invoked. key = ", c);
+
+  //Creating Command
+  auto context = std::make_unique<Context>();
+  auto command = std::make_unique<CommandDropBomb>();
+
+  Plane* plane = FindPlane();
+  context->setParam(plane, vecDynamicObj, bombsNumber, 2,
+                                     SMALL_CRATER_SIZE, score);
+  command->setParam(context.get());
+
   switch (c) {
 
     case 27: // esc
@@ -297,11 +291,13 @@ void SBomber::ProcessKBHit() {
       break;
 
     case 'b':
-      DropBomb();
+        CommandExecute(command.get());
+        updateFromCommand(context.get());
       break;
 
     case 'B':
-      DropBomb();
+        CommandExecute(command.get());
+        updateFromCommand(context.get());
       break;
 
     default:
@@ -347,25 +343,6 @@ void SBomber::TimeFinish() {
                                               + " deltaTime = ", (int)deltaTime);
 }
 
-void SBomber::DropBomb() {
-  if (bombsNumber > 0) {
-      FileLoggerProxy::getInstance().WriteToLog(std::string(__func__)
-                                                + " was invoked");
-    Plane* pPlane = FindPlane();
-    double x = pPlane->GetX() + 4;
-    double y = pPlane->GetY() + 2;
-
-    Bomb* pBomb = new Bomb;
-    pBomb->SetDirection(0.3, 1);
-    pBomb->SetSpeed(2);
-    pBomb->SetPos(x, y);
-    pBomb->SetWidth(SMALL_CRATER_SIZE);
-
-    vecDynamicObj.push_back(pBomb);
-    bombsNumber--;
-    score -= Bomb::BombCost;
-  }
-}
 
 void SBomber::run() {
     do {
@@ -394,4 +371,21 @@ void SBomber::run() {
 
 }
 
+void SBomber::CommandExecute(Command *command) {
+    command->execute();
+}
+
+void SBomber::updateFromCommand(Context* context) {
+    bombsNumber = context->mBombCount;
+    vecDynamicObj = context->mVecDynamicObject;
+    score = context->mScore;
+}
+
+
+
+
+
+
+
+
 
diff --git a/SBomber/src/TestFileLogger.cpp b/SBomber/src/TestFileLogger.cpp
index 8184f4e..ecf01e3 100644
--- a/SBomber/src/TestFileLogger.cpp
+++ b/SBomber/src/TestFileLogger.cpp
@@ -1,4 +1,33 @@
-//
-// Created by maxim on 29.12.2021.
-//
+#include "TestFileLogger.h"
 
+void TestFileLogger::OpenLogFile(const std::string &FN) {
+    logOut.open(FN, std::ios_base::out);
+}
+
+void TestFileLogger::CloseLogFile() {
+    if (logOut.is_open())
+    {
+        logOut.close();
+    }
+}
+
+void TestFileLogger::WriteToLog(const std::string &str) {
+    if (logOut.is_open()) {
+        logOut << GetCurDateTimeSingleton::getInstance().GetCurDateTime() <<
+               " - " << str << " TestFileLoggerSingleton" << std::endl;
+    }
+}
+
+void TestFileLogger::WriteToLog(const std::string &str, int n) {
+    if (logOut.is_open()) {
+        logOut << GetCurDateTimeSingleton::getInstance().GetCurDateTime() <<
+               " - " << str << n << " TestFileLoggerSingleton" << std::endl;
+    }
+}
+
+void TestFileLogger::WriteToLog(const std::string &str, double d) {
+    if (logOut.is_open()) {
+        logOut << GetCurDateTimeSingleton::getInstance().GetCurDateTime() <<
+               " - " << str << d << " TestFileLoggerSingleton" << std::endl;
+    }
+}
diff --git a/SBomber/src/main.cpp b/SBomber/src/main.cpp
index 1aeeb60..a95d882 100644
--- a/SBomber/src/main.cpp
+++ b/SBomber/src/main.cpp
@@ -1,17 +1,16 @@
 ﻿#include "SBomber.h"
-#include "MyTools.h"
-#include "ScreenSingleton.h"
-#include "WinterPlane.h"
-#include "GetCurDateTimeSingleton.h"
+#include "TestFileLogger.h"
 
 
-int main(void) {
+int main() {
   FileLoggerProxy::getInstance().OpenLogFile("log.txt");
+  TestFileLogger::getInstance().OpenLogFile("test_log.txt");
 
   SBomber game;
   game.run();
 
   FileLoggerProxy::getInstance().CloseLogFile();
+  TestFileLogger::getInstance().CloseLogFile();
 
   return 0;
 }
